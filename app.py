import streamlit as st
from dotenv import load_dotenv
from src.chatbot import Chatbot
from src.language_utils import detect_language, translate_text
from openai import OpenAI

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# Kh·ªüi t·∫°o OpenAI client m·ªôt l·∫ßn ƒë·ªÉ t√°i s·ª≠ d·ª•ng
client = OpenAI()

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† icon cho trang
st.set_page_config(page_title="ISTQB Chatbot", page_icon="ü§ñ")

# Cache resource ƒë·ªÉ kh√¥ng ph·∫£i t·∫£i l·∫°i model m·ªói l·∫ßn t∆∞∆°ng t√°c
@st.cache_resource
def load_chatbot():
    """T·∫£i chatbot v√† cache l·∫°i ƒë·ªÉ d√πng cho c√°c l·∫ßn sau."""
    return Chatbot()

# --- Helper Function ---
def display_grouped_sources(sources_list):
    """
    H√†m h·ªó tr·ª£ ƒë·ªÉ nh√≥m v√† hi·ªÉn th·ªã ngu·ªìn tham kh·∫£o m·ªôt c√°ch t·ªëi ∆∞u.
    """
    if not sources_list:
        return

    st.write("---")
    # st.subheader("Ngu·ªìn tham kh·∫£o:")
    
    # Gom c√°c trang theo t·ª´ng t√™n file
    grouped_sources = {}
    for source in sources_list:
        source_name = source.get('source', 'N/A')
        page_number = source.get('page')
        
        if source_name not in grouped_sources:
            # S·ª≠ d·ª•ng set ƒë·ªÉ t·ª± ƒë·ªông lo·∫°i b·ªè c√°c trang tr√πng l·∫∑p
            grouped_sources[source_name] = set()
        
        if isinstance(page_number, int):
            grouped_sources[source_name].add(page_number + 1)

    # Hi·ªÉn th·ªã c√°c ngu·ªìn ƒë√£ ƒë∆∞·ª£c gom nh√≥m
    for name, pages in grouped_sources.items():
        # Tr∆∞·ªùng h·ª£p ngu·ªìn l√† OpenAI ho·∫∑c kh√¥ng c√≥ trang c·ª• th·ªÉ
        if "OpenAI" in name or not pages:
            st.markdown(f"- **Ngu·ªìn**: `{name}`")
        # Tr∆∞·ªùng h·ª£p ngu·ªìn t·ª´ gi√°o tr√¨nh
        else:
            # S·∫Øp x·∫øp c√°c trang v√† n·ªëi ch√∫ng l·∫°i
            pages_str = ", ".join(map(str, sorted(list(pages))))
            st.markdown(f"- **Ngu·ªìn**: `{name}`, **Trang**: {pages_str}")


# --- Main App ---
# T·∫£i chatbot
bot = load_chatbot()

st.title("ü§ñ ISTQB Chatbot")
st.caption("Tr·ª£ l√Ω AI gi√∫p b·∫°n truy xu·∫•t th√¥ng tin t·ª´ gi√°o tr√¨nh ISTQB")

# Kh·ªüi t·∫°o l·ªãch s·ª≠ chat n·∫øu ch∆∞a c√≥
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "Xin ch√†o! B·∫°n c√≥ c√¢u h·ªèi n√†o v·ªÅ ISTQB kh√¥ng?"}
    ]

# Hi·ªÉn th·ªã c√°c tin nh·∫Øn ƒë√£ c√≥ trong l·ªãch s·ª≠
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.write(message["content"])
        # Hi·ªÉn th·ªã ngu·ªìn c·ªßa c√°c tin nh·∫Øn c≈© n·∫øu c√≥
        if message["role"] == "assistant":
            display_grouped_sources(message.get("sources", []))

# X·ª≠ l√Ω input m·ªõi t·ª´ ng∆∞·ªùi d√πng
if prompt := st.chat_input("H√£y nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
    # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ v√† hi·ªÉn th·ªã ngay
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.write(prompt)

    # X·ª≠ l√Ω v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi c·ªßa bot
    with st.chat_message("assistant"):
        with st.spinner("ƒêang suy nghƒ©..."):
            # Ph√°t hi·ªán ng√¥n ng·ªØ v√† d·ªãch n·∫øu c·∫ßn
            original_lang = detect_language(prompt)
            english_prompt = prompt
            if original_lang == 'vi':
                english_prompt = translate_text(prompt, "English", client)

            # L·∫•y k·∫øt qu·∫£ t·ª´ bot
            result = bot.answer(english_prompt)
            english_answer = result.get('answer', "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.")
            sources = result.get('sources', [])

            # D·ªãch ng∆∞·ª£c c√¢u tr·∫£ l·ªùi v·ªÅ ti·∫øng Vi·ªát n·∫øu c·∫ßn
            final_answer = english_answer
            if original_lang == 'vi':
                final_answer = translate_text(english_answer, "Vietnamese", client)
            
            # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
            st.write(final_answer)
            
            # Hi·ªÉn th·ªã ngu·ªìn tham kh·∫£o ƒë√£ ƒë∆∞·ª£c gom nh√≥m
            display_grouped_sources(sources)
            
            # Chu·∫©n b·ªã v√† l∆∞u tin nh·∫Øn ho√†n ch·ªânh v√†o l·ªãch s·ª≠
            assistant_message = {"role": "assistant", "content": final_answer}
            if sources:
                assistant_message["sources"] = sources
            st.session_state.messages.append(assistant_message)
