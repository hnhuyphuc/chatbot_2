import streamlit as st
from dotenv import load_dotenv
from src.chatbot import Chatbot
from src.language_utils import detect_language, translate_text
from openai import OpenAI

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# Kh·ªüi t·∫°o OpenAI client m·ªôt l·∫ßn ƒë·ªÉ t√°i s·ª≠ d·ª•ng
client = OpenAI()

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† icon cho trang
st.set_page_config(page_title="ISTQB Chatbot", page_icon="ü§ñ")

@st.cache_resource
def load_chatbot():
    """T·∫£i chatbot v√† cache l·∫°i ƒë·ªÉ d√πng cho c√°c l·∫ßn sau."""
    return Chatbot()

# --- Helper Function ---
def display_grouped_sources(sources_list):
    """
    H√†m h·ªó tr·ª£ ƒë·ªÉ nh√≥m v√† hi·ªÉn th·ªã ngu·ªìn tham kh·∫£o m·ªôt c√°ch t·ªëi ∆∞u.
    """
    if not sources_list:
        return

    st.write("---")
    
    grouped_sources = {}
    for source in sources_list:
        source_name = source.get('source', 'N/A')
        page_number = source.get('page')
        
        if source_name not in grouped_sources:
            grouped_sources[source_name] = set()
        
        if isinstance(page_number, int):
            grouped_sources[source_name].add(page_number + 1)

    for name, pages in grouped_sources.items():
        if "OpenAI" in name or not pages:
            st.markdown(f"**Ngu·ªìn**: `{name}`")
        else:
            pages_str = ", ".join(map(str, sorted(list(pages))))
            st.markdown(f"**Ngu·ªìn**: `{name}` - **Trang**: {pages_str}")

# --- Main App ---
bot = load_chatbot()

st.title("ü§ñ ISTQB Chatbot")
st.caption("Tr·ª£ l√Ω AI gi√∫p b·∫°n truy xu·∫•t th√¥ng tin t·ª´ gi√°o tr√¨nh ISTQB")

if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "Xin ch√†o! B·∫°n c√≥ c√¢u h·ªèi n√†o v·ªÅ ISTQB kh√¥ng?"}
    ]

# Hi·ªÉn th·ªã c√°c tin nh·∫Øn ƒë√£ c√≥ trong l·ªãch s·ª≠
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.write(message["content"])
        if message["role"] == "assistant":
            display_grouped_sources(message.get("sources", []))

# X·ª≠ l√Ω input m·ªõi t·ª´ ng∆∞·ªùi d√πng
if prompt := st.chat_input("H√£y nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.write(prompt)

    with st.chat_message("assistant"):
        # D·ªãch prompt sang ti·∫øng Anh
        original_lang = detect_language(prompt)
        english_prompt = prompt
        if original_lang == 'vi':
            english_prompt = translate_text(prompt, "English", client)

        # --- LOGIC M·ªöI: T∆Ø∆†NG T√ÅC THEO T·ª™NG B∆Ø·ªöC ---
        final_result = None
        
        # 1. T√¨m trong gi√°o tr√¨nh tr∆∞·ªõc
        with st.spinner("ƒêang t√¨m trong gi√°o tr√¨nh..."):
            syllabus_result = bot.search_in_syllabus(english_prompt)

        if syllabus_result:
            # N·∫øu t√¨m th·∫•y, ƒë√¢y l√† k·∫øt qu·∫£ cu·ªëi c√πng
            final_result = syllabus_result
        else:
            # 2. N·∫øu kh√¥ng t√¨m th·∫•y, th√¥ng b√°o v√† t√¨m b·∫±ng OpenAI
            placeholder = st.empty()
            placeholder.write("Gi√°o tr√¨nh ch∆∞a c√≥ th√¥ng tin n√†y. Xin h√£y ƒë·ª£i t√¥i h·ªèi OpenAI...")
            
            with st.spinner("ƒêang li√™n h·ªá v·ªõi OpenAI..."):
                openai_result = bot.search_with_openai_and_learn(english_prompt)
            
            final_result = openai_result
            placeholder.empty() # X√≥a th√¥ng b√°o t·∫°m th·ªùi

        # 3. X·ª≠ l√Ω v√† hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
        english_answer = final_result.get('answer', "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.")
        sources = final_result.get('sources', [])

        # D·ªãch ng∆∞·ª£c c√¢u tr·∫£ l·ªùi n·∫øu c·∫ßn
        final_answer = english_answer
        if original_lang == 'vi' and english_answer:
            final_answer = translate_text(english_answer, "Vietnamese", client)
        
        st.write(final_answer)
        
        # Hi·ªÉn th·ªã ngu·ªìn tham kh·∫£o ƒë√£ ƒë∆∞·ª£c gom nh√≥m
        display_grouped_sources(sources)
        
        # L∆∞u tin nh·∫Øn ho√†n ch·ªânh v√†o l·ªãch s·ª≠
        assistant_message = {"role": "assistant", "content": final_answer}
        if sources:
            assistant_message["sources"] = sources
        st.session_state.messages.append(assistant_message)
